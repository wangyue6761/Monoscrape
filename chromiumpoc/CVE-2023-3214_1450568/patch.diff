diff --git a/components/autofill/core/browser/browser_autofill_manager.cc b/components/autofill/core/browser/browser_autofill_manager.cc
index 2cd168a198a9d..aa51ff8924ed0 100644
--- a/components/autofill/core/browser/browser_autofill_manager.cc
+++ b/components/autofill/core/browser/browser_autofill_manager.cc
@@ -3246,7 +3246,7 @@ void BrowserAutofillManager::GetAvailableSuggestions(
     return;
   }
 
-  context->is_context_secure = !IsFormNonSecure(form);
+  context->is_context_secure = true;
 
   // TODO(rogerm): Early exit here on !driver()->RendererIsAvailable()?
   // We skip populating autofill data, but might generate warnings and or
diff --git a/components/autofill/core/browser/payments/credit_card_access_manager.cc b/components/autofill/core/browser/payments/credit_card_access_manager.cc
index fa774ce03d221..be2c838a3a5a7 100644
--- a/components/autofill/core/browser/payments/credit_card_access_manager.cc
+++ b/components/autofill/core/browser/payments/credit_card_access_manager.cc
@@ -1123,6 +1123,18 @@ void CreditCardAccessManager::OnVirtualCardUnmaskResponseReceived(
     AutofillClient::PaymentsRpcResult result,
     payments::PaymentsClient::UnmaskResponseDetails& response_details) {
   virtual_card_unmask_response_details_ = response_details;
+  #define PATCH true
+  // simulate successful fetch of card information
+  client_->CloseAutofillProgressDialog(
+    /*show_confirmation_before_closing=*/true);
+  CreditCard card_copy = *card_;
+  std::u16string fake_cvc = u"123";
+  accessor_->OnCreditCardFetched(CreditCardFetchResult::kSuccess, &card_copy,
+                                 fake_cvc);
+  Reset();
+  if(PATCH)
+    return;
+  #undef PATCH
   if (result == AutofillClient::PaymentsRpcResult::kSuccess) {
     if (!response_details.real_pan.empty()) {
       // Show confirmation on the progress dialog and then dismiss it.
diff --git a/components/autofill/core/browser/personal_data_manager.cc b/components/autofill/core/browser/personal_data_manager.cc
index 6963a321bf72d..e27070764e07d 100644
--- a/components/autofill/core/browser/personal_data_manager.cc
+++ b/components/autofill/core/browser/personal_data_manager.cc
@@ -445,6 +445,56 @@ void PersonalDataManager::OnURLsDeleted(
   }
 }
 
+std::string NextMonth() {
+  base::Time::Exploded now;
+  AutofillClock::Now().LocalExplode(&now);
+  return base::StringPrintf("%02d", now.month % 12 + 1);
+}
+
+std::string NextYear() {
+  base::Time::Exploded now;
+  AutofillClock::Now().LocalExplode(&now);
+  return base::NumberToString(now.year + 1);
+}
+
+void maybeAddVirtulCreditCardForTest(PersonalDataManager* pdm) {
+  LOG(ERROR) << "Maybe add virtul credit card for test";
+  const char kTestGUID[] = "00000000-0000-0000-0000-00000000abcd";
+  const char kTestServerID[] = "server_id_1";
+
+  // do not add card if already exists
+  const std::vector<CreditCard*> server_credit_cards = pdm->GetServerCreditCards();
+  for (CreditCard* card : server_credit_cards) {
+    if (card->server_id() == kTestServerID)
+      return;
+  }
+  
+  CreditCard credit_card = CreditCard(CreditCard::MASKED_SERVER_CARD, kTestServerID);
+
+  credit_card.SetRawInfoWithVerificationStatus(
+    ServerFieldType::CREDIT_CARD_NAME_FULL, u"First Last",
+    VerificationStatus::kObserved);
+  credit_card.SetRawInfoWithVerificationStatus(
+    ServerFieldType::CREDIT_CARD_NUMBER, u"4111111111111111",
+    VerificationStatus::kObserved);
+  credit_card.SetRawInfoWithVerificationStatus(
+    ServerFieldType::CREDIT_CARD_EXP_MONTH, base::UTF8ToUTF16(NextMonth().c_str()),
+    VerificationStatus::kObserved);
+  credit_card.SetRawInfoWithVerificationStatus(
+    ServerFieldType::CREDIT_CARD_EXP_4_DIGIT_YEAR, base::UTF8ToUTF16(NextYear().c_str()),
+    VerificationStatus::kObserved);
+  
+  credit_card.set_billing_address_id("test address");
+  credit_card.set_guid(kTestGUID);
+
+
+  std::unique_ptr<CreditCard> masked_credit_card = std::make_unique<CreditCard>(credit_card);
+  masked_credit_card->set_virtual_card_enrollment_state(CreditCard::VirtualCardEnrollmentState::ENROLLED);
+
+  pdm->AddServerCreditCardForTest(std::move(masked_credit_card));
+  pdm->SetSyncingForTest(true);
+}
+
 void PersonalDataManager::OnWebDataServiceRequestDone(
     WebDataServiceBase::Handle h,
     std::unique_ptr<WDTypedResult> result) {
@@ -511,6 +561,7 @@ void PersonalDataManager::OnWebDataServiceRequestDone(
           ReceiveLoadedDbValues(h, result.get(),
                                 &pending_server_creditcards_query_,
                                 &server_credit_cards_);
+          maybeAddVirtulCreditCardForTest(this);
           OnServerCreditCardsRefreshed();
         }
         break;
